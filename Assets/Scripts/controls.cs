//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""controls"",
    ""maps"": [
        {
            ""name"": ""movement"",
            ""id"": ""ea807996-b049-4af2-87ac-5111c7d83909"",
            ""actions"": [
                {
                    ""name"": ""right"",
                    ""type"": ""Button"",
                    ""id"": ""13c954ac-156f-4e73-bb96-cef1cf886487"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""left"",
                    ""type"": ""Button"",
                    ""id"": ""64f1f65a-20e9-47fb-847b-cd7be0d49ea9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""escape"",
                    ""type"": ""Button"",
                    ""id"": ""851d5c77-71c6-4d19-a57e-79ffd003a829"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""space"",
                    ""type"": ""Button"",
                    ""id"": ""d8acbe67-57e3-481b-a66a-7f9f0688957b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""0b16d8c9-6b04-4da3-8ac2-25c8f8ee2e44"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""shop"",
                    ""type"": ""Button"",
                    ""id"": ""675a5ccc-fb92-44b6-927a-005b7396d995"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca1817f2-b057-49e8-bf87-93e37863b7fb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0551093-12c1-4911-af8b-0048ac074a82"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02997974-1a3d-472a-a66e-72ade9bebf29"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""372a1eae-def9-497c-8fc4-ec1db6c711ba"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71bd3188-c2bf-463b-8943-2e612168547b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ec2e3ed-31c2-4c83-a228-ac3e6d051b6d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f42a6959-05df-4d17-9120-01117607a9e3"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7208050-e2d0-4d7d-a72a-61f0a4cf91e3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // movement
        m_movement = asset.FindActionMap("movement", throwIfNotFound: true);
        m_movement_right = m_movement.FindAction("right", throwIfNotFound: true);
        m_movement_left = m_movement.FindAction("left", throwIfNotFound: true);
        m_movement_escape = m_movement.FindAction("escape", throwIfNotFound: true);
        m_movement_space = m_movement.FindAction("space", throwIfNotFound: true);
        m_movement_mainMenu = m_movement.FindAction("mainMenu", throwIfNotFound: true);
        m_movement_shop = m_movement.FindAction("shop", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_movement.enabled, "This will cause a leak and performance issues, Controls.movement.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // movement
    private readonly InputActionMap m_movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_movement_right;
    private readonly InputAction m_movement_left;
    private readonly InputAction m_movement_escape;
    private readonly InputAction m_movement_space;
    private readonly InputAction m_movement_mainMenu;
    private readonly InputAction m_movement_shop;
    public struct MovementActions
    {
        private @Controls m_Wrapper;
        public MovementActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @right => m_Wrapper.m_movement_right;
        public InputAction @left => m_Wrapper.m_movement_left;
        public InputAction @escape => m_Wrapper.m_movement_escape;
        public InputAction @space => m_Wrapper.m_movement_space;
        public InputAction @mainMenu => m_Wrapper.m_movement_mainMenu;
        public InputAction @shop => m_Wrapper.m_movement_shop;
        public InputActionMap Get() { return m_Wrapper.m_movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @right.started += instance.OnRight;
            @right.performed += instance.OnRight;
            @right.canceled += instance.OnRight;
            @left.started += instance.OnLeft;
            @left.performed += instance.OnLeft;
            @left.canceled += instance.OnLeft;
            @escape.started += instance.OnEscape;
            @escape.performed += instance.OnEscape;
            @escape.canceled += instance.OnEscape;
            @space.started += instance.OnSpace;
            @space.performed += instance.OnSpace;
            @space.canceled += instance.OnSpace;
            @mainMenu.started += instance.OnMainMenu;
            @mainMenu.performed += instance.OnMainMenu;
            @mainMenu.canceled += instance.OnMainMenu;
            @shop.started += instance.OnShop;
            @shop.performed += instance.OnShop;
            @shop.canceled += instance.OnShop;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @right.started -= instance.OnRight;
            @right.performed -= instance.OnRight;
            @right.canceled -= instance.OnRight;
            @left.started -= instance.OnLeft;
            @left.performed -= instance.OnLeft;
            @left.canceled -= instance.OnLeft;
            @escape.started -= instance.OnEscape;
            @escape.performed -= instance.OnEscape;
            @escape.canceled -= instance.OnEscape;
            @space.started -= instance.OnSpace;
            @space.performed -= instance.OnSpace;
            @space.canceled -= instance.OnSpace;
            @mainMenu.started -= instance.OnMainMenu;
            @mainMenu.performed -= instance.OnMainMenu;
            @mainMenu.canceled -= instance.OnMainMenu;
            @shop.started -= instance.OnShop;
            @shop.performed -= instance.OnShop;
            @shop.canceled -= instance.OnShop;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @movement => new MovementActions(this);
    public interface IMovementActions
    {
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnSpace(InputAction.CallbackContext context);
        void OnMainMenu(InputAction.CallbackContext context);
        void OnShop(InputAction.CallbackContext context);
    }
}
